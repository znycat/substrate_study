"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSignedBlockExtended = void 0;
const tslib_1 = require("tslib");
const util_js_1 = require("./util.js");
function mapExtrinsics(extrinsics, records) {
    return extrinsics.map((extrinsic, index) => {
        let dispatchError;
        let dispatchInfo;
        const events = records
            .filter(({ phase }) => phase.isApplyExtrinsic && phase.asApplyExtrinsic.eq(index))
            .map(({ event }) => {
            if (event.section === 'system') {
                if (event.method === 'ExtrinsicSuccess') {
                    dispatchInfo = event.data[0];
                }
                else if (event.method === 'ExtrinsicFailed') {
                    dispatchError = event.data[0];
                    dispatchInfo = event.data[1];
                }
            }
            return event;
        });
        return { dispatchError, dispatchInfo, events, extrinsic };
    });
}
function createSignedBlockExtended(registry, block, events, validators, author) {
    var _Implementation_author, _Implementation_events, _Implementation_extrinsics;
    // an instance of the base extrinsic for us to extend
    const SignedBlockBase = registry.createClass('SignedBlock');
    class Implementation extends SignedBlockBase {
        constructor(registry, block, events, validators, author) {
            super(registry, block);
            _Implementation_author.set(this, void 0);
            _Implementation_events.set(this, void 0);
            _Implementation_extrinsics.set(this, void 0);
            tslib_1.__classPrivateFieldSet(this, _Implementation_author, author || (0, util_js_1.extractAuthor)(this.block.header.digest, validators || []), "f");
            tslib_1.__classPrivateFieldSet(this, _Implementation_events, events || [], "f");
            tslib_1.__classPrivateFieldSet(this, _Implementation_extrinsics, mapExtrinsics(this.block.extrinsics, tslib_1.__classPrivateFieldGet(this, _Implementation_events, "f")), "f");
            this.createdAtHash = block?.createdAtHash;
        }
        /**
         * @description Convenience method, returns the author for the block
         */
        get author() {
            return tslib_1.__classPrivateFieldGet(this, _Implementation_author, "f");
        }
        /**
         * @description Convenience method, returns the events associated with the block
         */
        get events() {
            return tslib_1.__classPrivateFieldGet(this, _Implementation_events, "f");
        }
        /**
         * @description Returns the extrinsics and their events, mapped
         */
        get extrinsics() {
            return tslib_1.__classPrivateFieldGet(this, _Implementation_extrinsics, "f");
        }
    }
    _Implementation_author = new WeakMap(), _Implementation_events = new WeakMap(), _Implementation_extrinsics = new WeakMap();
    return new Implementation(registry, block, events, validators, author);
}
exports.createSignedBlockExtended = createSignedBlockExtended;
