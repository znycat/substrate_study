var _WrapperKeepOpaque_Type, _WrapperKeepOpaque_decoded, _WrapperKeepOpaque_opaqueName;
import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
import { compactAddLength, compactStripLength, compactToU8a, isHex, isU8a, u8aToU8a } from '@polkadot/util';
import { Raw } from '../native/Raw.js';
import { typeToConstructor } from '../utils/index.js';
import { Bytes } from './Bytes.js';
function decodeRaw(registry, typeName, value) {
    const Type = typeToConstructor(registry, typeName);
    if (isU8a(value) || isHex(value)) {
        try {
            const [, u8a] = isHex(value)
                ? [0, u8aToU8a(value)]
                : (value instanceof Raw)
                    ? [0, value.subarray()]
                    : compactStripLength(value);
            return [Type, new Type(registry, u8a), value];
        }
        catch {
            return [Type, null, value];
        }
    }
    const instance = new Type(registry, value);
    return [Type, instance, compactAddLength(instance.toU8a())];
}
export class WrapperKeepOpaque extends Bytes {
    constructor(registry, typeName, value, { opaqueName = 'WrapperKeepOpaque' } = {}) {
        const [Type, decoded, u8a] = decodeRaw(registry, typeName, value);
        super(registry, u8a);
        _WrapperKeepOpaque_Type.set(this, void 0);
        _WrapperKeepOpaque_decoded.set(this, void 0);
        _WrapperKeepOpaque_opaqueName.set(this, void 0);
        __classPrivateFieldSet(this, _WrapperKeepOpaque_Type, Type, "f");
        __classPrivateFieldSet(this, _WrapperKeepOpaque_decoded, decoded, "f");
        __classPrivateFieldSet(this, _WrapperKeepOpaque_opaqueName, opaqueName, "f");
    }
    static with(Type) {
        return class extends WrapperKeepOpaque {
            constructor(registry, value) {
                super(registry, Type, value);
            }
        };
    }
    /**
     * @description Checks if the wrapper is decodable
     */
    get isDecoded() {
        return !!__classPrivateFieldGet(this, _WrapperKeepOpaque_decoded, "f");
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
        return __classPrivateFieldGet(this, _WrapperKeepOpaque_decoded, "f")
            ? {
                inner: [__classPrivateFieldGet(this, _WrapperKeepOpaque_decoded, "f").inspect()],
                outer: [compactToU8a(this.length)]
            }
            : {
                outer: [compactToU8a(this.length), this.toU8a(true)]
            };
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman(isExtended) {
        return __classPrivateFieldGet(this, _WrapperKeepOpaque_decoded, "f")
            ? __classPrivateFieldGet(this, _WrapperKeepOpaque_decoded, "f").toHuman(isExtended)
            : super.toHuman();
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
        return __classPrivateFieldGet(this, _WrapperKeepOpaque_decoded, "f")
            ? __classPrivateFieldGet(this, _WrapperKeepOpaque_decoded, "f").toPrimitive()
            : super.toPrimitive();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return `${__classPrivateFieldGet(this, _WrapperKeepOpaque_opaqueName, "f")}<${this.registry.getClassName(__classPrivateFieldGet(this, _WrapperKeepOpaque_Type, "f")) || (__classPrivateFieldGet(this, _WrapperKeepOpaque_decoded, "f") ? __classPrivateFieldGet(this, _WrapperKeepOpaque_decoded, "f").toRawType() : new (__classPrivateFieldGet(this, _WrapperKeepOpaque_Type, "f"))(this.registry).toRawType())}>`;
    }
    /**
     * @description Converts the Object to to a string (either decoded or bytes)
     */
    toString() {
        return __classPrivateFieldGet(this, _WrapperKeepOpaque_decoded, "f")
            ? __classPrivateFieldGet(this, _WrapperKeepOpaque_decoded, "f").toString()
            : super.toString();
    }
    /**
     * @description Returns the decoded that the WrapperKeepOpaque represents (if available), throws if non-decodable
     */
    unwrap() {
        if (!__classPrivateFieldGet(this, _WrapperKeepOpaque_decoded, "f")) {
            throw new Error(`${__classPrivateFieldGet(this, _WrapperKeepOpaque_opaqueName, "f")}: unwrapping an undecodable value`);
        }
        return __classPrivateFieldGet(this, _WrapperKeepOpaque_decoded, "f");
    }
}
_WrapperKeepOpaque_Type = new WeakMap(), _WrapperKeepOpaque_decoded = new WeakMap(), _WrapperKeepOpaque_opaqueName = new WeakMap();
