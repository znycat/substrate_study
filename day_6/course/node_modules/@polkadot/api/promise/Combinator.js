var _Combinator_allHasFired, _Combinator_callback, _Combinator_fired, _Combinator_fns, _Combinator_isActive, _Combinator_results, _Combinator_subscriptions;
import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
import { isFunction } from '@polkadot/util';
export class Combinator {
    constructor(fns, callback) {
        _Combinator_allHasFired.set(this, false);
        _Combinator_callback.set(this, void 0);
        _Combinator_fired.set(this, []);
        _Combinator_fns.set(this, []);
        _Combinator_isActive.set(this, true);
        _Combinator_results.set(this, []);
        _Combinator_subscriptions.set(this, []);
        __classPrivateFieldSet(this, _Combinator_callback, callback, "f");
        // eslint-disable-next-line @typescript-eslint/require-await
        __classPrivateFieldSet(this, _Combinator_subscriptions, fns.map(async (input, index) => {
            const [fn, ...args] = Array.isArray(input)
                ? input
                : [input];
            __classPrivateFieldGet(this, _Combinator_fired, "f").push(false);
            __classPrivateFieldGet(this, _Combinator_fns, "f").push(fn);
            // Not quite 100% how to have a variable number at the front here
            // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/ban-types
            return fn(...args, this._createCallback(index));
        }), "f");
    }
    _allHasFired() {
        __classPrivateFieldSet(this, _Combinator_allHasFired, __classPrivateFieldGet(this, _Combinator_allHasFired, "f") || __classPrivateFieldGet(this, _Combinator_fired, "f").filter((hasFired) => !hasFired).length === 0, "f");
        return __classPrivateFieldGet(this, _Combinator_allHasFired, "f");
    }
    _createCallback(index) {
        return (value) => {
            __classPrivateFieldGet(this, _Combinator_fired, "f")[index] = true;
            __classPrivateFieldGet(this, _Combinator_results, "f")[index] = value;
            this._triggerUpdate();
        };
    }
    _triggerUpdate() {
        if (!__classPrivateFieldGet(this, _Combinator_isActive, "f") || !isFunction(__classPrivateFieldGet(this, _Combinator_callback, "f")) || !this._allHasFired()) {
            return;
        }
        try {
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            __classPrivateFieldGet(this, _Combinator_callback, "f").call(this, __classPrivateFieldGet(this, _Combinator_results, "f"));
        }
        catch (error) {
            // swallow, we don't want the handler to trip us up
        }
    }
    unsubscribe() {
        if (!__classPrivateFieldGet(this, _Combinator_isActive, "f")) {
            return;
        }
        __classPrivateFieldSet(this, _Combinator_isActive, false, "f");
        // eslint-disable-next-line @typescript-eslint/no-misused-promises
        __classPrivateFieldGet(this, _Combinator_subscriptions, "f").forEach(async (subscription) => {
            try {
                const unsubscribe = await subscription;
                if (isFunction(unsubscribe)) {
                    unsubscribe();
                }
            }
            catch (error) {
                // ignore
            }
        });
    }
}
_Combinator_allHasFired = new WeakMap(), _Combinator_callback = new WeakMap(), _Combinator_fired = new WeakMap(), _Combinator_fns = new WeakMap(), _Combinator_isActive = new WeakMap(), _Combinator_results = new WeakMap(), _Combinator_subscriptions = new WeakMap();
