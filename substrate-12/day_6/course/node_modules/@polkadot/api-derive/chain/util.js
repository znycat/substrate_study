import { combineLatest, map, of } from 'rxjs';
import { memo, unwrapBlockNumber } from '../util/index.js';
export function createBlockNumberDerive(fn) {
    return (instanceId, api) => memo(instanceId, () => fn(api).pipe(map(unwrapBlockNumber)));
}
export function getAuthorDetails(header, queryAt) {
    // this is Moonbeam specific
    if (queryAt.authorMapping && queryAt.authorMapping.mappingWithDeposit) {
        const mapId = header.digest.logs[0] && ((header.digest.logs[0].isConsensus && header.digest.logs[0].asConsensus[1]) ||
            (header.digest.logs[0].isPreRuntime && header.digest.logs[0].asPreRuntime[1]));
        if (mapId) {
            return combineLatest([
                of(header),
                queryAt.session
                    ? queryAt.session.validators()
                    : of(null),
                queryAt.authorMapping.mappingWithDeposit(mapId).pipe(map((opt) => opt.unwrapOr({ account: null }).account))
            ]);
        }
    }
    // normal operation, non-mapping
    return combineLatest([
        of(header),
        queryAt.session
            ? queryAt.session.validators()
            : of(null),
        of(null)
    ]);
}
