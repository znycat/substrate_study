"use strict";
var _AbstractBase_raw;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractBase = void 0;
const tslib_1 = require("tslib");
/**
 * @name Base
 * @description A type extends the Base class, when it holds a value
 */
class AbstractBase {
    constructor(registry, value, initialU8aLength) {
        _AbstractBase_raw.set(this, void 0);
        this.initialU8aLength = initialU8aLength;
        tslib_1.__classPrivateFieldSet(this, _AbstractBase_raw, value, "f");
        this.registry = registry;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */
    get encodedLength() {
        return this.toU8a().length;
    }
    /**
     * @description returns a hash of the contents
     */
    get hash() {
        return this.registry.hash(this.toU8a());
    }
    /**
     * @description returns the inner (wrapped value)
     */
    get inner() {
        return tslib_1.__classPrivateFieldGet(this, _AbstractBase_raw, "f");
    }
    /**
     * @description Checks if the value is an empty value
     */
    get isEmpty() {
        return tslib_1.__classPrivateFieldGet(this, _AbstractBase_raw, "f").isEmpty;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    eq(other) {
        return tslib_1.__classPrivateFieldGet(this, _AbstractBase_raw, "f").eq(other);
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */
    inspect() {
        return tslib_1.__classPrivateFieldGet(this, _AbstractBase_raw, "f").inspect();
    }
    /**
     * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
     */
    toHex(isLe) {
        return tslib_1.__classPrivateFieldGet(this, _AbstractBase_raw, "f").toHex(isLe);
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    toHuman(isExtended) {
        return tslib_1.__classPrivateFieldGet(this, _AbstractBase_raw, "f").toHuman(isExtended);
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON() {
        return tslib_1.__classPrivateFieldGet(this, _AbstractBase_raw, "f").toJSON();
    }
    /**
     * @description Converts the value in a best-fit primitive form
     */
    toPrimitive() {
        return tslib_1.__classPrivateFieldGet(this, _AbstractBase_raw, "f").toPrimitive();
    }
    /**
     * @description Returns the string representation of the value
     */
    toString() {
        return tslib_1.__classPrivateFieldGet(this, _AbstractBase_raw, "f").toString();
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    toU8a(isBare) {
        return tslib_1.__classPrivateFieldGet(this, _AbstractBase_raw, "f").toU8a(isBare);
    }
    /**
     * @description Returns the inner wrapped value (equivalent to valueOf)
     */
    unwrap() {
        return tslib_1.__classPrivateFieldGet(this, _AbstractBase_raw, "f");
    }
    /**
     * @description Returns the inner wrapped value
     */
    valueOf() {
        return tslib_1.__classPrivateFieldGet(this, _AbstractBase_raw, "f");
    }
}
exports.AbstractBase = AbstractBase;
_AbstractBase_raw = new WeakMap();
