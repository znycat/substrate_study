var _Range_rangeName;
import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
import { Tuple } from '../base/Tuple.js';
/**
 * @name Range
 * @description
 * Rust `Range<T>` representation
 */
export class Range extends Tuple {
    constructor(registry, Type, value, { rangeName = 'Range' } = {}) {
        super(registry, [Type, Type], value);
        _Range_rangeName.set(this, void 0);
        __classPrivateFieldSet(this, _Range_rangeName, rangeName, "f");
    }
    static with(Type) {
        return class extends Range {
            constructor(registry, value) {
                super(registry, Type, value);
            }
        };
    }
    /**
     * @description Returns the starting range value
     */
    get start() {
        return this[0];
    }
    /**
     * @description Returns the ending range value
     */
    get end() {
        return this[1];
    }
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
        return `${__classPrivateFieldGet(this, _Range_rangeName, "f")}<${this.start.toRawType()}>`;
    }
}
_Range_rangeName = new WeakMap();
