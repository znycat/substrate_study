var _DeriveJunction_chainCode, _DeriveJunction_isHard;
import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
import { BN, bnToU8a, compactAddLength, hexToU8a, isBigInt, isBn, isHex, isNumber, isString, stringToU8a } from '@polkadot/util';
import { blake2AsU8a } from '../blake2/asU8a.js';
import { BN_LE_256_OPTS } from '../bn.js';
const RE_NUMBER = /^\d+$/;
const JUNCTION_ID_LEN = 32;
export class DeriveJunction {
    constructor() {
        _DeriveJunction_chainCode.set(this, new Uint8Array(32));
        _DeriveJunction_isHard.set(this, false);
    }
    static from(value) {
        const result = new DeriveJunction();
        const [code, isHard] = value.startsWith('/')
            ? [value.substring(1), true]
            : [value, false];
        result.soft(RE_NUMBER.test(code)
            ? new BN(code, 10)
            : code);
        return isHard
            ? result.harden()
            : result;
    }
    get chainCode() {
        return __classPrivateFieldGet(this, _DeriveJunction_chainCode, "f");
    }
    get isHard() {
        return __classPrivateFieldGet(this, _DeriveJunction_isHard, "f");
    }
    get isSoft() {
        return !__classPrivateFieldGet(this, _DeriveJunction_isHard, "f");
    }
    hard(value) {
        return this.soft(value).harden();
    }
    harden() {
        __classPrivateFieldSet(this, _DeriveJunction_isHard, true, "f");
        return this;
    }
    soft(value) {
        if (isNumber(value) || isBn(value) || isBigInt(value)) {
            return this.soft(bnToU8a(value, BN_LE_256_OPTS));
        }
        else if (isHex(value)) {
            return this.soft(hexToU8a(value));
        }
        else if (isString(value)) {
            return this.soft(compactAddLength(stringToU8a(value)));
        }
        else if (value.length > JUNCTION_ID_LEN) {
            return this.soft(blake2AsU8a(value));
        }
        __classPrivateFieldGet(this, _DeriveJunction_chainCode, "f").fill(0);
        __classPrivateFieldGet(this, _DeriveJunction_chainCode, "f").set(value, 0);
        return this;
    }
    soften() {
        __classPrivateFieldSet(this, _DeriveJunction_isHard, false, "f");
        return this;
    }
}
_DeriveJunction_chainCode = new WeakMap(), _DeriveJunction_isHard = new WeakMap();
