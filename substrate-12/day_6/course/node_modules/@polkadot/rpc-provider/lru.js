var _LRUCache_instances, _LRUCache_data, _LRUCache_refs, _LRUCache_length, _LRUCache_head, _LRUCache_tail, _LRUCache_toHead;
import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
const DEFAULT_CAPACITY = 128;
class LRUNode {
    constructor(key) {
        this.key = key;
        this.next = this.prev = this;
    }
}
export class LRUCache {
    constructor(capacity = DEFAULT_CAPACITY) {
        _LRUCache_instances.add(this);
        _LRUCache_data.set(this, new Map());
        _LRUCache_refs.set(this, new Map());
        _LRUCache_length.set(this, 0);
        _LRUCache_head.set(this, void 0);
        _LRUCache_tail.set(this, void 0);
        this.capacity = capacity;
        __classPrivateFieldSet(this, _LRUCache_head, __classPrivateFieldSet(this, _LRUCache_tail, new LRUNode('<empty>'), "f"), "f");
    }
    get length() {
        return __classPrivateFieldGet(this, _LRUCache_length, "f");
    }
    get lengthData() {
        return __classPrivateFieldGet(this, _LRUCache_data, "f").size;
    }
    get lengthRefs() {
        return __classPrivateFieldGet(this, _LRUCache_refs, "f").size;
    }
    entries() {
        const keys = this.keys();
        const entries = new Array(keys.length);
        for (let i = 0; i < keys.length; i++) {
            const key = keys[i];
            entries[i] = [key, __classPrivateFieldGet(this, _LRUCache_data, "f").get(key)];
        }
        return entries;
    }
    keys() {
        const keys = [];
        if (__classPrivateFieldGet(this, _LRUCache_length, "f")) {
            let curr = __classPrivateFieldGet(this, _LRUCache_head, "f");
            while (curr !== __classPrivateFieldGet(this, _LRUCache_tail, "f")) {
                keys.push(curr.key);
                curr = curr.next;
            }
            keys.push(curr.key);
        }
        return keys;
    }
    get(key) {
        const data = __classPrivateFieldGet(this, _LRUCache_data, "f").get(key);
        if (data) {
            __classPrivateFieldGet(this, _LRUCache_instances, "m", _LRUCache_toHead).call(this, key);
            return data;
        }
        return null;
    }
    set(key, value) {
        if (__classPrivateFieldGet(this, _LRUCache_data, "f").has(key)) {
            __classPrivateFieldGet(this, _LRUCache_instances, "m", _LRUCache_toHead).call(this, key);
        }
        else {
            const node = new LRUNode(key);
            __classPrivateFieldGet(this, _LRUCache_refs, "f").set(node.key, node);
            if (this.length === 0) {
                __classPrivateFieldSet(this, _LRUCache_head, __classPrivateFieldSet(this, _LRUCache_tail, node, "f"), "f");
            }
            else {
                __classPrivateFieldGet(this, _LRUCache_head, "f").prev = node;
                node.next = __classPrivateFieldGet(this, _LRUCache_head, "f");
                __classPrivateFieldSet(this, _LRUCache_head, node, "f");
            }
            if (__classPrivateFieldGet(this, _LRUCache_length, "f") === this.capacity) {
                __classPrivateFieldGet(this, _LRUCache_data, "f").delete(__classPrivateFieldGet(this, _LRUCache_tail, "f").key);
                __classPrivateFieldGet(this, _LRUCache_refs, "f").delete(__classPrivateFieldGet(this, _LRUCache_tail, "f").key);
                __classPrivateFieldSet(this, _LRUCache_tail, __classPrivateFieldGet(this, _LRUCache_tail, "f").prev, "f");
                __classPrivateFieldGet(this, _LRUCache_tail, "f").next = __classPrivateFieldGet(this, _LRUCache_head, "f");
            }
            else {
                __classPrivateFieldSet(this, _LRUCache_length, __classPrivateFieldGet(this, _LRUCache_length, "f") + 1, "f");
            }
        }
        __classPrivateFieldGet(this, _LRUCache_data, "f").set(key, value);
    }
}
_LRUCache_data = new WeakMap(), _LRUCache_refs = new WeakMap(), _LRUCache_length = new WeakMap(), _LRUCache_head = new WeakMap(), _LRUCache_tail = new WeakMap(), _LRUCache_instances = new WeakSet(), _LRUCache_toHead = function _LRUCache_toHead(key) {
    const ref = __classPrivateFieldGet(this, _LRUCache_refs, "f").get(key);
    if (ref && ref !== __classPrivateFieldGet(this, _LRUCache_head, "f")) {
        ref.prev.next = ref.next;
        ref.next.prev = ref.prev;
        ref.next = __classPrivateFieldGet(this, _LRUCache_head, "f");
        __classPrivateFieldGet(this, _LRUCache_head, "f").prev = ref;
        __classPrivateFieldSet(this, _LRUCache_head, ref, "f");
    }
};
